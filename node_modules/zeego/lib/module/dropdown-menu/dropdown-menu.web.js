function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { cloneElement } from 'react';
import { ItemPrimitive, MenuDisplayName, create } from '../menu';
import { View } from 'react-native';
import { forwardRef } from 'react';
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';

const Root = _ref => {
  let {
    children,
    onOpenChange
  } = _ref;
  return /*#__PURE__*/React.createElement(DropdownMenu.Root, {
    onOpenChange: onOpenChange
  }, children);
};

Root.displayName = MenuDisplayName.Root;
const TriggerView = /*#__PURE__*/forwardRef((props, ref) => {
  if (props.asChild) {
    const {
      children,
      ...rest
    } = props;
    return /*#__PURE__*/cloneElement(children, {
      ref,
      ...rest,
      onClickCapture: props.onPointerDown
    });
  }

  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});

const Trigger = _ref2 => {
  let {
    children,
    style,
    asChild
  } = _ref2;
  return /*#__PURE__*/React.createElement(DropdownMenu.Trigger, {
    asChild: true
  }, /*#__PURE__*/React.createElement(TriggerView, {
    style: style,
    asChild: asChild
  }, children));
};

Trigger.displayName = MenuDisplayName.Trigger;
const ContentView = /*#__PURE__*/forwardRef((props, ref) => {
  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});

const Content = _ref3 => {
  let {
    children,
    style,
    loop,
    side,
    align,
    alignOffset,
    avoidCollisions,
    collisionPadding,
    sideOffset
  } = _ref3;
  return /*#__PURE__*/React.createElement(DropdownMenu.Portal, null, /*#__PURE__*/React.createElement(DropdownMenu.Content, {
    loop: loop,
    side: side,
    align: align,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding,
    sideOffset: sideOffset
  }, /*#__PURE__*/React.createElement(ContentView, {
    style: style
  }, children)));
};

Content.displayName = MenuDisplayName.Content;
const itemStyleReset = {
  outlineWidth: 0
};

const Item = _ref4 => {
  let {
    children,
    disabled,
    onSelect,
    style,
    onBlur,
    onFocus,
    textValue,
    shouldDismissMenuOnSelect
  } = _ref4;
  return /*#__PURE__*/React.createElement(DropdownMenu.Item, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    onSelect: e => {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect();

      if (shouldDismissMenuOnSelect === false) {
        e.preventDefault();
      }
    },
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

Item.displayName = MenuDisplayName.Item;

const SubTrigger = _ref5 => {
  let {
    children,
    style,
    textValue,
    disabled,
    onBlur,
    onFocus
  } = _ref5;
  return /*#__PURE__*/React.createElement(DropdownMenu.SubTrigger, {
    disabled: disabled,
    textValue: textValue,
    onBlur: onBlur,
    onFocus: onFocus,
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

SubTrigger.displayName = MenuDisplayName.SubTrigger;

const Group = _ref6 => {
  let {
    children
  } = _ref6;
  return /*#__PURE__*/React.createElement(DropdownMenu.Group, null, children);
};

Group.displayName = MenuDisplayName.Group;

const Separator = _ref7 => {
  let {
    style
  } = _ref7;
  return /*#__PURE__*/React.createElement(DropdownMenu.Separator, null, /*#__PURE__*/React.createElement(View, {
    style: style
  }));
};

Separator.displayName = MenuDisplayName.Separator;

const CheckboxItem = _ref8 => {
  let {
    onValueChange,
    value,
    disabled,
    textValue,
    onBlur,
    onFocus,
    style,
    children,
    shouldDismissMenuOnSelect
  } = _ref8;
  return /*#__PURE__*/React.createElement(DropdownMenu.CheckboxItem, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    checked: typeof value === 'boolean' ? value : value !== 'off',
    onSelect: e => {
      const current = value === true ? 'on' : value === false ? 'off' : value;
      const next = current === 'on' ? 'off' : 'on';
      onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(next, current);

      if (shouldDismissMenuOnSelect === false) {
        e.preventDefault();
      }
    },
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

CheckboxItem.displayName = MenuDisplayName.CheckboxItem;

const ItemIndicator = _ref9 => {
  let {
    style,
    children
  } = _ref9;
  return /*#__PURE__*/React.createElement(DropdownMenu.ItemIndicator, null, /*#__PURE__*/React.createElement(View, {
    style: style
  }, children));
};

ItemIndicator.displayName = MenuDisplayName.ItemIndicator;

const ItemIcon = _ref10 => {
  let {
    children,
    style
  } = _ref10;
  return /*#__PURE__*/React.createElement(View, {
    style: style
  }, children);
};

ItemIcon.displayName = MenuDisplayName.ItemIcon;
const Arrow = create(_ref11 => {
  let {
    children,
    ...restProps
  } = _ref11;
  return /*#__PURE__*/React.createElement(DropdownMenu.Arrow, restProps, children);
}, 'Arrow');
const Sub = create(_ref12 => {
  let {
    children
  } = _ref12;
  return /*#__PURE__*/React.createElement(DropdownMenu.Sub, null, children);
}, 'Sub');
const SubContent = create(_ref13 => {
  let {
    children,
    alignOffset,
    avoidCollisions,
    collisionPadding,
    loop,
    sideOffset,
    style
  } = _ref13;
  return /*#__PURE__*/React.createElement(DropdownMenu.Portal, null, /*#__PURE__*/React.createElement(DropdownMenu.SubContent, {
    loop: loop,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding,
    sideOffset: sideOffset
  }, /*#__PURE__*/React.createElement(ContentView, {
    style: style
  }, children)));
}, 'SubContent');
export { Root, Trigger, Content, Item, SubTrigger, Group, Separator, CheckboxItem, ItemIndicator, ItemIcon, Arrow, Sub, SubContent };
export { ItemImage } from '../menu/web-primitives/item-image';
export { Label } from './web/label';
export { ItemTitle, ItemSubtitle } from '../menu';
//# sourceMappingURL=dropdown-menu.web.js.map