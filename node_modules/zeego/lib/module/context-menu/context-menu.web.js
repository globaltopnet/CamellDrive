function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as ContextMenu from '@radix-ui/react-context-menu';
import React, { cloneElement, forwardRef } from 'react';
import { View } from 'react-native';
import { ItemPrimitive, create } from '../menu';
const Root = create(_ref => {
  let {
    children,
    onOpenChange
  } = _ref;
  return /*#__PURE__*/React.createElement(ContextMenu.Root, {
    onOpenChange: onOpenChange
  }, children);
}, 'Root');
const TriggerView = /*#__PURE__*/forwardRef((props, ref) => {
  if (props.asChild) {
    return /*#__PURE__*/cloneElement(props.children, {
      ref,
      onClickCapture: props.onPointerDown
    });
  }

  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});
const Trigger = create(_ref2 => {
  let {
    children,
    style,
    asChild
  } = _ref2;
  return /*#__PURE__*/React.createElement(ContextMenu.Trigger, {
    asChild: true
  }, /*#__PURE__*/React.createElement(TriggerView, {
    style: style,
    asChild: asChild
  }, children));
}, 'Trigger');
const ContentView = /*#__PURE__*/forwardRef((props, ref) => {
  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});
const Content = create(_ref3 => {
  let {
    children,
    style,
    loop,
    alignOffset,
    avoidCollisions,
    collisionPadding
  } = _ref3;
  return /*#__PURE__*/React.createElement(ContextMenu.Portal, null, /*#__PURE__*/React.createElement(ContextMenu.Content, {
    loop: loop,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding
  }, /*#__PURE__*/React.createElement(ContentView, {
    style: style
  }, children)));
}, 'Content');
const itemStyleReset = {
  outlineWidth: 0
};
const Item = create(_ref4 => {
  let {
    children,
    disabled,
    onSelect,
    style,
    onBlur,
    onFocus,
    textValue
  } = _ref4;
  return /*#__PURE__*/React.createElement(ContextMenu.Item, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    onSelect: onSelect,
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
}, 'Item');
const SubTrigger = create(_ref5 => {
  let {
    children,
    style,
    textValue,
    disabled,
    onBlur,
    onFocus
  } = _ref5;
  return /*#__PURE__*/React.createElement(ContextMenu.SubTrigger, {
    disabled: disabled,
    textValue: textValue,
    onBlur: onBlur,
    onFocus: onFocus,
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
}, 'SubTrigger');
const Group = create(_ref6 => {
  let {
    children
  } = _ref6;
  return /*#__PURE__*/React.createElement(ContextMenu.Group, null, children);
}, 'Group');
const Separator = create(_ref7 => {
  let {
    style
  } = _ref7;
  return /*#__PURE__*/React.createElement(ContextMenu.Separator, null, /*#__PURE__*/React.createElement(View, {
    style: style
  }));
}, 'Separator');
const CheckboxItem = create(_ref8 => {
  let {
    onValueChange,
    value,
    disabled,
    textValue,
    onBlur,
    onFocus,
    style,
    children
  } = _ref8;
  return /*#__PURE__*/React.createElement(ContextMenu.CheckboxItem, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    checked: typeof value === 'boolean' ? value : value !== 'off',
    onCheckedChange: next => onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(next ? 'on' : 'off', value === true ? 'on' : value === false ? 'off' : value),
    style: itemStyleReset
  }, /*#__PURE__*/React.createElement(ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
}, 'CheckboxItem');
const ItemIndicator = create(_ref9 => {
  let {
    style,
    children
  } = _ref9;
  return /*#__PURE__*/React.createElement(ContextMenu.ItemIndicator, null, /*#__PURE__*/React.createElement(View, {
    style: style
  }, children));
}, 'ItemIndicator');
const ItemIcon = create(_ref10 => {
  let {
    children,
    style
  } = _ref10;
  return /*#__PURE__*/React.createElement(View, {
    style: style
  }, children);
}, 'ItemIcon');
const Preview = create(() => /*#__PURE__*/React.createElement(React.Fragment, null), 'Preview');
const Arrow = create(_ref11 => {
  let {
    children,
    ...restProps
  } = _ref11;
  return /*#__PURE__*/React.createElement(ContextMenu.Arrow, restProps, children);
}, 'Arrow');
const Sub = create(_ref12 => {
  let {
    children
  } = _ref12;
  return /*#__PURE__*/React.createElement(ContextMenu.Sub, null, children);
}, 'Sub');
const SubContent = create(_ref13 => {
  let {
    children,
    alignOffset,
    avoidCollisions,
    collisionPadding,
    loop,
    style,
    sideOffset
  } = _ref13;
  return /*#__PURE__*/React.createElement(ContextMenu.Portal, null, /*#__PURE__*/React.createElement(ContextMenu.SubContent, {
    loop: loop,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding,
    sideOffset: sideOffset
  }, /*#__PURE__*/React.createElement(ContentView, {
    style: style
  }, children)));
}, 'SubContent');
const Auxiliary = create(_ => /*#__PURE__*/React.createElement(React.Fragment, null), 'Auxiliary');
export { Root, Trigger, Content, Item, SubTrigger, Group, Separator, CheckboxItem, ItemIndicator, ItemIcon, Preview, Arrow, Sub, SubContent, Auxiliary };
export { ItemImage } from '../menu/web-primitives/item-image';
export { Label } from './web/label';
export { ItemTitle, ItemSubtitle } from '../menu';
//# sourceMappingURL=context-menu.web.js.map