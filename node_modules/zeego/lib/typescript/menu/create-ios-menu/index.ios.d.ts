import type { MenuContentProps, MenuGroupProps, MenuItemProps, MenuItemSubtitleProps, MenuItemTitleProps, MenuRootProps, MenuTriggerProps, MenuSeparatorProps, MenuItemIndicatorProps, MenuLabelProps, ContextMenuContentProps, MenuSubProps, MenuSubContentProps } from '../types';
import React from 'react';
declare const createIosMenu: (Menu: 'ContextMenu' | 'DropdownMenu') => {
    Root: React.FC<MenuRootProps>;
    Trigger: React.FC<MenuTriggerProps>;
    Content: React.FC<MenuContentProps | ContextMenuContentProps>;
    Item: React.FC<{
        children: React.ReactNode;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        textValue?: string | undefined;
    } & {
        onSelect?: (() => void) | undefined;
        disabled?: boolean | undefined;
        hidden?: boolean | undefined;
        destructive?: boolean | undefined;
        onFocus?: (() => void) | undefined;
        onBlur?: (() => void) | undefined;
        key: string;
        shouldDismissMenuOnSelect?: boolean | undefined;
    }>;
    ItemTitle: React.FC<MenuItemTitleProps>;
    ItemSubtitle: React.FC<MenuItemSubtitleProps>;
    SubTrigger: React.FC<Omit<MenuItemProps, "onSelect"> & {
        key: string;
    }>;
    Group: React.FC<MenuGroupProps>;
    Separator: React.FC<MenuSeparatorProps>;
    ItemIcon: React.FC<import("../types").MenuItemCommonProps & {
        children?: React.ReactNode;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    }>;
    ItemIndicator: React.FC<MenuItemIndicatorProps>;
    CheckboxItem: React.FC<Omit<MenuItemProps, "onSelect"> & {
        value: boolean | "mixed" | "on" | "off";
        onValueChange?: ((state: "mixed" | "on" | "off", prevState: "mixed" | "on" | "off") => void) | undefined;
        key: string;
        shouldDismissMenuOnSelect?: boolean | undefined;
    }>;
    ItemImage: React.FC<import("../types").MenuItemCommonProps & {
        source: import("react-native").ImageSourcePropType;
        style?: import("react-native").StyleProp<import("react-native").ImageStyle>;
        width?: number | undefined;
        height?: number | undefined;
        resizeMode?: import("react-native").ImageResizeMode | undefined;
        fadeDuration?: number | undefined;
        ios?: {
            style?: import("react-native-ios-context-menu/src/types/ImageItemConfig").ImageOptions | undefined;
            lazy?: boolean | undefined;
        } | undefined;
    } & Pick<import("react-native").ImageProps, "accessibilityLabel">>;
    Label: React.FC<MenuLabelProps>;
    Preview: React.FC<{
        children: React.ReactNode | (() => React.ReactNode);
        size?: import("react-native-ios-context-menu").MenuPreviewSize | undefined;
        onPress?: import("react-native-ios-context-menu").OnPressMenuPreviewEvent | undefined;
    } & {
        borderRadius?: number | undefined;
        isResizeAnimated?: boolean | undefined;
        backgroundColor?: string | import("react-native-ios-utilities").DynamicColor | undefined;
        preferredCommitStyle?: import("react-native-ios-context-menu").ContextMenuInteractionCommitStyle | undefined;
    }>;
    Arrow: React.FC<{
        height?: number | undefined;
        width?: number | undefined;
        children?: React.ReactNode;
        asChild?: boolean | undefined;
    } & Pick<React.SVGAttributes<SVGSVGElement>, "style" | "className" | "fill">>;
    Sub: React.FC<MenuSubProps>;
    SubContent: React.FC<MenuSubContentProps>;
    Auxiliary: React.FC<Omit<import("react-native-ios-context-menu").MenuAuxiliaryPreviewConfig, "marginAuxiliaryPreview"> & {
        children: React.ReactNode | ((options: {
            dismissMenu: () => void;
        }) => React.ReactNode);
        onDidShow?: (() => void) | undefined;
        marginWithScreenEdge?: number | undefined;
        onWillShow?: (() => void) | undefined;
    }>;
};
export { createIosMenu };
