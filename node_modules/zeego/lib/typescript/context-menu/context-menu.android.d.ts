/// <reference types="react" />
declare const Root: import("react").FC<import("../menu").MenuRootProps>, Trigger: import("react").FC<import("../menu").MenuTriggerProps>, Content: import("react").FC<import("../menu").MenuContentProps | import("../menu").ContextMenuContentProps>, Item: import("react").FC<{
    children: import("react").ReactNode;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    textValue?: string | undefined;
} & {
    onSelect?: (() => void) | undefined;
    disabled?: boolean | undefined;
    hidden?: boolean | undefined;
    destructive?: boolean | undefined;
    onFocus?: (() => void) | undefined;
    onBlur?: (() => void) | undefined;
    key: string;
    shouldDismissMenuOnSelect?: boolean | undefined;
}>, ItemTitle: import("react").FC<import("../menu").MenuItemTitleProps>, ItemSubtitle: import("react").FC<import("../menu").MenuItemSubtitleProps>, SubTrigger: import("react").FC<Omit<import("../menu").MenuItemProps, "onSelect"> & {
    key: string;
}>, Group: import("react").FC<import("../menu").MenuGroupProps>, Separator: import("react").FC<import("../menu").MenuSeparatorProps>, ItemIcon: import("react").FC<import("../menu").MenuItemCommonProps & {
    children?: import("react").ReactNode;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
}>, ItemImage: import("react").FC<import("../menu").MenuItemCommonProps & {
    source: import("react-native").ImageSourcePropType;
    style?: import("react-native").StyleProp<import("react-native").ImageStyle>;
    width?: number | undefined;
    height?: number | undefined;
    resizeMode?: import("react-native").ImageResizeMode | undefined;
    fadeDuration?: number | undefined;
    ios?: {
        style?: import("react-native-ios-context-menu/src/types/ImageItemConfig").ImageOptions | undefined;
        lazy?: boolean | undefined;
    } | undefined;
} & Pick<import("react-native").ImageProps, "accessibilityLabel">>, CheckboxItem: import("react").FC<Omit<import("../menu").MenuItemProps, "onSelect"> & {
    value: boolean | "mixed" | "on" | "off";
    onValueChange?: ((state: "mixed" | "on" | "off", prevState: "mixed" | "on" | "off") => void) | undefined;
    key: string;
    shouldDismissMenuOnSelect?: boolean | undefined;
}>, ItemIndicator: import("react").FC<import("../menu").MenuItemIndicatorProps>, Label: import("react").FC<import("../menu").MenuLabelProps>, Preview: import("react").FC<{
    children: import("react").ReactNode | (() => import("react").ReactNode);
    size?: import("react-native-ios-context-menu").MenuPreviewSize | undefined;
    onPress?: import("react-native-ios-context-menu").OnPressMenuPreviewEvent | undefined;
} & {
    borderRadius?: number | undefined;
    isResizeAnimated?: boolean | undefined;
    backgroundColor?: string | import("react-native-ios-utilities").DynamicColor | undefined;
    preferredCommitStyle?: import("react-native-ios-context-menu").ContextMenuInteractionCommitStyle | undefined;
}>, Arrow: import("react").FC<{
    height?: number | undefined;
    width?: number | undefined;
    children?: import("react").ReactNode;
    asChild?: boolean | undefined;
} & Pick<import("react").SVGAttributes<SVGSVGElement>, "style" | "className" | "fill">>, Sub: import("react").FC<import("../menu").MenuSubProps>, SubContent: import("react").FC<import("../menu").MenuSubContentProps>, Auxiliary: import("react").FC<Omit<import("react-native-ios-context-menu").MenuAuxiliaryPreviewConfig, "marginAuxiliaryPreview"> & {
    children: import("react").ReactNode | ((options: {
        dismissMenu: () => void;
    }) => import("react").ReactNode);
    onDidShow?: (() => void) | undefined;
    marginWithScreenEdge?: number | undefined;
    onWillShow?: (() => void) | undefined;
}>;
export { Root, Trigger, Content, Item, ItemTitle, ItemSubtitle, SubTrigger, Group, Separator, ItemIcon, ItemImage, CheckboxItem, ItemIndicator, Label, Preview, Arrow, Sub, SubContent, Auxiliary, };
