"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemIcon = exports.Item = exports.Group = exports.Content = exports.CheckboxItem = exports.Arrow = void 0;
Object.defineProperty(exports, "ItemImage", {
  enumerable: true,
  get: function () {
    return _itemImage.ItemImage;
  }
});
exports.ItemIndicator = void 0;
Object.defineProperty(exports, "ItemSubtitle", {
  enumerable: true,
  get: function () {
    return _menu.ItemSubtitle;
  }
});
Object.defineProperty(exports, "ItemTitle", {
  enumerable: true,
  get: function () {
    return _menu.ItemTitle;
  }
});
Object.defineProperty(exports, "Label", {
  enumerable: true,
  get: function () {
    return _label.Label;
  }
});
exports.Trigger = exports.SubTrigger = exports.SubContent = exports.Sub = exports.Separator = exports.Root = void 0;

var _react = _interopRequireWildcard(require("react"));

var _menu = require("../menu");

var _reactNative = require("react-native");

var DropdownMenu = _interopRequireWildcard(require("@radix-ui/react-dropdown-menu"));

var _itemImage = require("../menu/web-primitives/item-image");

var _label = require("./web/label");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Root = _ref => {
  let {
    children,
    onOpenChange
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Root, {
    onOpenChange: onOpenChange
  }, children);
};

exports.Root = Root;
Root.displayName = _menu.MenuDisplayName.Root;
const TriggerView = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  if (props.asChild) {
    const {
      children,
      ...rest
    } = props;
    return /*#__PURE__*/(0, _react.cloneElement)(children, {
      ref,
      ...rest,
      onClickCapture: props.onPointerDown
    });
  }

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});

const Trigger = _ref2 => {
  let {
    children,
    style,
    asChild
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Trigger, {
    asChild: true
  }, /*#__PURE__*/_react.default.createElement(TriggerView, {
    style: style,
    asChild: asChild
  }, children));
};

exports.Trigger = Trigger;
Trigger.displayName = _menu.MenuDisplayName.Trigger;
const ContentView = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    ref: ref
  }, props, {
    onClickCapture: props.onPointerDown
  }), props.children);
});

const Content = _ref3 => {
  let {
    children,
    style,
    loop,
    side,
    align,
    alignOffset,
    avoidCollisions,
    collisionPadding,
    sideOffset
  } = _ref3;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Portal, null, /*#__PURE__*/_react.default.createElement(DropdownMenu.Content, {
    loop: loop,
    side: side,
    align: align,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding,
    sideOffset: sideOffset
  }, /*#__PURE__*/_react.default.createElement(ContentView, {
    style: style
  }, children)));
};

exports.Content = Content;
Content.displayName = _menu.MenuDisplayName.Content;
const itemStyleReset = {
  outlineWidth: 0
};

const Item = _ref4 => {
  let {
    children,
    disabled,
    onSelect,
    style,
    onBlur,
    onFocus,
    textValue,
    shouldDismissMenuOnSelect
  } = _ref4;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Item, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    onSelect: e => {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect();

      if (shouldDismissMenuOnSelect === false) {
        e.preventDefault();
      }
    },
    style: itemStyleReset
  }, /*#__PURE__*/_react.default.createElement(_menu.ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

exports.Item = Item;
Item.displayName = _menu.MenuDisplayName.Item;

const SubTrigger = _ref5 => {
  let {
    children,
    style,
    textValue,
    disabled,
    onBlur,
    onFocus
  } = _ref5;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.SubTrigger, {
    disabled: disabled,
    textValue: textValue,
    onBlur: onBlur,
    onFocus: onFocus,
    style: itemStyleReset
  }, /*#__PURE__*/_react.default.createElement(_menu.ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

exports.SubTrigger = SubTrigger;
SubTrigger.displayName = _menu.MenuDisplayName.SubTrigger;

const Group = _ref6 => {
  let {
    children
  } = _ref6;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Group, null, children);
};

exports.Group = Group;
Group.displayName = _menu.MenuDisplayName.Group;

const Separator = _ref7 => {
  let {
    style
  } = _ref7;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Separator, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style
  }));
};

exports.Separator = Separator;
Separator.displayName = _menu.MenuDisplayName.Separator;

const CheckboxItem = _ref8 => {
  let {
    onValueChange,
    value,
    disabled,
    textValue,
    onBlur,
    onFocus,
    style,
    children,
    shouldDismissMenuOnSelect
  } = _ref8;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.CheckboxItem, {
    onFocus: onFocus,
    textValue: textValue,
    onBlur: onBlur,
    disabled: disabled,
    checked: typeof value === 'boolean' ? value : value !== 'off',
    onSelect: e => {
      const current = value === true ? 'on' : value === false ? 'off' : value;
      const next = current === 'on' ? 'off' : 'on';
      onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(next, current);

      if (shouldDismissMenuOnSelect === false) {
        e.preventDefault();
      }
    },
    style: itemStyleReset
  }, /*#__PURE__*/_react.default.createElement(_menu.ItemPrimitive // @ts-expect-error we require a key in the types
  // this is for consumers
  // however, it isn't relevant locally here, since the key will be passed to the parent component
  // so that is sufficient
  , {
    key: undefined,
    style: style
  }, children));
};

exports.CheckboxItem = CheckboxItem;
CheckboxItem.displayName = _menu.MenuDisplayName.CheckboxItem;

const ItemIndicator = _ref9 => {
  let {
    style,
    children
  } = _ref9;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.ItemIndicator, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style
  }, children));
};

exports.ItemIndicator = ItemIndicator;
ItemIndicator.displayName = _menu.MenuDisplayName.ItemIndicator;

const ItemIcon = _ref10 => {
  let {
    children,
    style
  } = _ref10;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style
  }, children);
};

exports.ItemIcon = ItemIcon;
ItemIcon.displayName = _menu.MenuDisplayName.ItemIcon;
const Arrow = (0, _menu.create)(_ref11 => {
  let {
    children,
    ...restProps
  } = _ref11;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Arrow, restProps, children);
}, 'Arrow');
exports.Arrow = Arrow;
const Sub = (0, _menu.create)(_ref12 => {
  let {
    children
  } = _ref12;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Sub, null, children);
}, 'Sub');
exports.Sub = Sub;
const SubContent = (0, _menu.create)(_ref13 => {
  let {
    children,
    alignOffset,
    avoidCollisions,
    collisionPadding,
    loop,
    sideOffset,
    style
  } = _ref13;
  return /*#__PURE__*/_react.default.createElement(DropdownMenu.Portal, null, /*#__PURE__*/_react.default.createElement(DropdownMenu.SubContent, {
    loop: loop,
    alignOffset: alignOffset,
    avoidCollisions: avoidCollisions,
    collisionPadding: collisionPadding,
    sideOffset: sideOffset
  }, /*#__PURE__*/_react.default.createElement(ContentView, {
    style: style
  }, children)));
}, 'SubContent');
exports.SubContent = SubContent;
//# sourceMappingURL=dropdown-menu.web.js.map