{"version":3,"sources":["context-menu.web.tsx"],"names":["Root","children","onOpenChange","TriggerView","props","ref","asChild","onClickCapture","onPointerDown","Trigger","style","ContentView","Content","loop","alignOffset","avoidCollisions","collisionPadding","itemStyleReset","outlineWidth","Item","disabled","onSelect","onBlur","onFocus","textValue","undefined","SubTrigger","Group","Separator","CheckboxItem","onValueChange","value","next","ItemIndicator","ItemIcon","Preview","Arrow","restProps","Sub","SubContent","sideOffset","Auxiliary","_"],"mappings":"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","sourcesContent":["import * as ContextMenu from '@radix-ui/react-context-menu'\nimport React, { cloneElement, forwardRef } from 'react'\nimport { View } from 'react-native'\n\nimport {\n  ItemPrimitive,\n  ContextMenuContentProps,\n  MenuGroupProps,\n  MenuItemProps,\n  MenuRootProps,\n  MenuSeparatorProps,\n  MenuSubTriggerProps,\n  MenuTriggerProps,\n  MenuCheckboxItemProps,\n  MenuItemIndicatorProps,\n  MenuItemIconProps,\n  create,\n  MenuArrowProps,\n  ContextMenuSubContentProps,\n  MenuSubProps,\n  ContextMenuAuxliliaryProps,\n} from '../menu'\n\nconst Root = create(({ children, onOpenChange }: MenuRootProps) => {\n  return (\n    <ContextMenu.Root onOpenChange={onOpenChange}>{children}</ContextMenu.Root>\n  )\n}, 'Root')\n\nconst TriggerView = forwardRef<unknown, any>((props, ref) => {\n  if (props.asChild) {\n    return cloneElement(props.children, {\n      ref,\n      onClickCapture: props.onPointerDown,\n    })\n  }\n  return (\n    <View ref={ref} {...props} onClickCapture={props.onPointerDown}>\n      {props.children}\n    </View>\n  )\n})\n\nconst Trigger = create(({ children, style, asChild }: MenuTriggerProps) => {\n  return (\n    <ContextMenu.Trigger asChild>\n      <TriggerView style={style} asChild={asChild}>\n        {children}\n      </TriggerView>\n    </ContextMenu.Trigger>\n  )\n}, 'Trigger')\n\nconst ContentView = forwardRef<unknown, any>((props, ref) => {\n  return (\n    <View ref={ref} {...props} onClickCapture={props.onPointerDown}>\n      {props.children}\n    </View>\n  )\n})\n\nconst Content = create(\n  ({\n    children,\n    style,\n    loop,\n    alignOffset,\n    avoidCollisions,\n    collisionPadding,\n  }: ContextMenuContentProps) => {\n    return (\n      <ContextMenu.Portal>\n        <ContextMenu.Content\n          loop={loop}\n          alignOffset={alignOffset}\n          avoidCollisions={avoidCollisions}\n          collisionPadding={collisionPadding}\n        >\n          <ContentView style={style}>{children}</ContentView>\n        </ContextMenu.Content>\n      </ContextMenu.Portal>\n    )\n  },\n  'Content'\n)\n\nconst itemStyleReset = {\n  outlineWidth: 0,\n}\n\nconst Item = create(\n  ({\n    children,\n    disabled,\n    onSelect,\n    style,\n    onBlur,\n    onFocus,\n    textValue,\n  }: MenuItemProps) => {\n    return (\n      <ContextMenu.Item\n        onFocus={onFocus}\n        textValue={textValue}\n        onBlur={onBlur}\n        disabled={disabled}\n        onSelect={onSelect}\n        style={itemStyleReset}\n      >\n        <ItemPrimitive\n          // @ts-expect-error we require a key in the types\n          // this is for consumers\n          // however, it isn't relevant locally here, since the key will be passed to the parent component\n          // so that is sufficient\n          key={undefined}\n          style={style}\n        >\n          {children}\n        </ItemPrimitive>\n      </ContextMenu.Item>\n    )\n  },\n  'Item'\n)\n\nconst SubTrigger = create(\n  ({\n    children,\n    style,\n    textValue,\n    disabled,\n    onBlur,\n    onFocus,\n  }: MenuSubTriggerProps) => {\n    return (\n      <ContextMenu.SubTrigger\n        disabled={disabled}\n        textValue={textValue}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        style={itemStyleReset}\n      >\n        <ItemPrimitive\n          // this is for consumers\n          // however, it isn't relevant locally here, since the key will be passed to the parent component\n          // so that is sufficient\n          key={undefined as any}\n          style={style}\n        >\n          {children}\n        </ItemPrimitive>\n      </ContextMenu.SubTrigger>\n    )\n  },\n  'SubTrigger'\n)\n\nconst Group = create(({ children }: MenuGroupProps) => {\n  return <ContextMenu.Group>{children}</ContextMenu.Group>\n}, 'Group')\n\nconst Separator = create(({ style }: MenuSeparatorProps) => {\n  return (\n    <ContextMenu.Separator>\n      <View style={style} />\n    </ContextMenu.Separator>\n  )\n}, 'Separator')\n\nconst CheckboxItem = create(\n  ({\n    onValueChange,\n    value,\n    disabled,\n    textValue,\n    onBlur,\n    onFocus,\n    style,\n    children,\n  }: MenuCheckboxItemProps) => {\n    return (\n      <ContextMenu.CheckboxItem\n        onFocus={onFocus}\n        textValue={textValue}\n        onBlur={onBlur}\n        disabled={disabled}\n        checked={typeof value === 'boolean' ? value : value !== 'off'}\n        onCheckedChange={(next) =>\n          onValueChange?.(\n            next ? 'on' : 'off',\n            value === true ? 'on' : value === false ? 'off' : value\n          )\n        }\n        style={itemStyleReset}\n      >\n        <ItemPrimitive\n          // @ts-expect-error we require a key in the types\n          // this is for consumers\n          // however, it isn't relevant locally here, since the key will be passed to the parent component\n          // so that is sufficient\n          key={undefined}\n          style={style}\n        >\n          {children}\n        </ItemPrimitive>\n      </ContextMenu.CheckboxItem>\n    )\n  },\n  'CheckboxItem'\n)\n\nconst ItemIndicator = create(\n  ({ style, children }: MenuItemIndicatorProps) => (\n    <ContextMenu.ItemIndicator>\n      <View style={style}>{children}</View>\n    </ContextMenu.ItemIndicator>\n  ),\n  'ItemIndicator'\n)\n\nconst ItemIcon = create(({ children, style }: MenuItemIconProps) => {\n  return <View style={style}>{children}</View>\n}, 'ItemIcon')\n\nconst Preview = create(() => <></>, 'Preview')\n\nconst Arrow = create(({ children, ...restProps }: MenuArrowProps) => {\n  return <ContextMenu.Arrow {...restProps}>{children}</ContextMenu.Arrow>\n}, 'Arrow')\n\nconst Sub = create(({ children }: MenuSubProps) => {\n  return <ContextMenu.Sub>{children}</ContextMenu.Sub>\n}, 'Sub')\n\nconst SubContent = create(\n  ({\n    children,\n    alignOffset,\n    avoidCollisions,\n    collisionPadding,\n    loop,\n    style,\n    sideOffset,\n  }: ContextMenuSubContentProps) => (\n    <ContextMenu.Portal>\n      <ContextMenu.SubContent\n        loop={loop}\n        alignOffset={alignOffset}\n        avoidCollisions={avoidCollisions}\n        collisionPadding={collisionPadding}\n        sideOffset={sideOffset}\n      >\n        <ContentView style={style}>{children}</ContentView>\n      </ContextMenu.SubContent>\n    </ContextMenu.Portal>\n  ),\n  'SubContent'\n)\n\nconst Auxiliary = create((_: ContextMenuAuxliliaryProps) => <></>, 'Auxiliary')\nexport {\n  Root,\n  Trigger,\n  Content,\n  Item,\n  SubTrigger,\n  Group,\n  Separator,\n  CheckboxItem,\n  ItemIndicator,\n  ItemIcon,\n  Preview,\n  Arrow,\n  Sub,\n  SubContent,\n  Auxiliary,\n}\n\nexport { ItemImage } from '../menu/web-primitives/item-image'\nexport { Label } from './web/label'\n\nexport { ItemTitle, ItemSubtitle } from '../menu'\n"]}