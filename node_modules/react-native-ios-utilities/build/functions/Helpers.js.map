{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../src/functions/Helpers.ts"],"names":[],"mappings":"AACA,uDAAuD;AACvD,2CAA2C;AAC3C,MAAM,UAAU,aAAa,CAC3B,IAAqB,EACrB,QAAmC;IAEnC,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;QACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;YAC3B,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAAA,CAAC;AAEF,iDAAiD;AACjD,MAAM,UAAU,OAAO,CAAC,EAAU;IAChC,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;QACnC,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE;YAChC,YAAY,CAAC,SAAS,CAAC,CAAC;YACxB,OAAO,EAAE,CAAC;QACZ,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC;AAAA,CAAC;AAEF,gFAAgF;AAChF,MAAM,UAAU,kBAAkB,CAAI,EAAU,EAAE,OAAmB;IACnE,qDAAqD;IACrD,MAAM,cAAc,GAAG,IAAI,OAAO,CAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;QAClD,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE;YAChC,YAAY,CAAC,SAAS,CAAC,CAAC;YACxB,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAA;QAC1C,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,+DAA+D;IAC/D,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC;AACjD,CAAC;AAAA,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,GAAoB,EAAE,MAAM,GAAG,CAAC;IAClD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC;AAAA,CAAC","sourcesContent":["\n/** wrapper func for setState that returns a promise */\n// eslint-disable-next-line consistent-this\nexport function setStateAsync<T extends {}>(\n  that: React.Component,\n  newState: T | ((prevState: T) => T)\n) {\n  return new Promise<void>((resolve) => {\n    that.setState(newState, () => {\n      resolve();\n    });\n  });\n};\n\n/** wrapper for timeout that returns a promise */\nexport function timeout(ms: number) {\n  return new Promise<void>((resolve) => {\n    const timeoutID = setTimeout(() => {\n      clearTimeout(timeoutID);\n      resolve();\n    }, ms);\n  });\n};\n\n/** Wraps a promise that will reject if not not resolved in <ms> milliseconds */\nexport function promiseWithTimeout<T>(ms: number, promise: Promise<T>) {\n  // Create a promise that rejects in <ms> milliseconds\n  const timeoutPromise = new Promise<T>((_, reject) => {\n    const timeoutID = setTimeout(() => {\n      clearTimeout(timeoutID);\n      reject(`Promise timed out in ${ms} ms.`)\n    }, ms);\n  });\n\n  // Returns a race between our timeout and the passed in promise\n  return Promise.race([promise, timeoutPromise]);\n};\n\nexport function pad(num: number | string, places = 2) {\n  return String(num).padStart(places, '0');\n};\n"]}