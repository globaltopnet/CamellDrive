{"version":3,"file":"ComputableLayoutValueMode.js","sourceRoot":"","sources":["../../../src/types/ComputableLayout/ComputableLayoutValueMode.ts"],"names":[],"mappings":"","sourcesContent":["import { CGRect, CGSize, UIEdgeInsets } from \"../NativeTypes\";\nimport { ComputableLayoutValuePercentTarget } from \"./ComputableLayoutValuePercentTarget\";\nimport { ComputableLayoutValueEvaluableCondition } from \"./ComputableLayoutValueEvaluableCondition\";\nimport { EvaluableCondition } from \"./EvaluableCondition\";\n\n\nexport type ComputableLayoutValueMode = {\n  mode: 'stretch';\n} | {\n  mode: 'constant';\n  value: number;\n} | {\n  mode: 'percent';\n  relativeTo?: ComputableLayoutValuePercentTarget;\n  percentValue: number;\n} | {\n  mode: 'safeAreaInsets';\n  insetKey: keyof UIEdgeInsets;\n} | {\n  mode: 'keyboardScreenRect';\n  rectKey: keyof CGRect;\n} | {\n  mode: 'keyboardRelativeSize';\n  sizeKey: keyof CGSize;\n} | {\n  mode: 'multipleValues';\n  values: ComputableLayoutValueMode[];\n} | {\n  mode: 'conditionalLayoutValue';\n  condition: ComputableLayoutValueEvaluableCondition;\n  trueValue: ComputableLayoutValueMode;\n  falseValue?: ComputableLayoutValueMode;\n} | {\n  mode: 'conditionalValue';\n  condition: EvaluableCondition;\n  trueValue?: ComputableLayoutValueMode;\n  falseValue?: ComputableLayoutValueMode;\n};"]}