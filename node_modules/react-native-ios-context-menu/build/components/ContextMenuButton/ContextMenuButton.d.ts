import React from 'react';
import { RNIContextMenuButton } from '../../native_components/RNIContextMenuButton';
import type { OnMenuWillShowEvent, OnMenuWillHideEvent, OnMenuDidShowEvent, OnMenuDidHideEvent, OnMenuWillCancelEvent, OnMenuDidCancelEvent, OnPressMenuItemEvent } from '../../types/MenuEvents';
import type { ContextMenuButtonProps, ContextMenuButtonState } from './ContextMenuButtonTypes';
import type { MenuElementConfig } from '../../types/MenuConfig';
export declare class ContextMenuButton extends React.PureComponent<ContextMenuButtonProps, ContextMenuButtonState> {
    nativeRef: RNIContextMenuButton;
    constructor(props: ContextMenuButtonProps);
    getProps: () => {
        isContextMenuEnabled: boolean;
        useActionSheetFallback: boolean;
        internalViewCleanupMode: import("react-native-ios-utilities").RNIViewCleanupMode;
        isMenuPrimaryAction: boolean;
        menuConfig: import("../../types/MenuConfig").MenuConfig | undefined;
        onMenuWillShow: OnMenuWillShowEvent | undefined;
        onMenuWillHide: OnMenuWillHideEvent | undefined;
        onMenuWillCancel: OnMenuWillCancelEvent | undefined;
        onMenuDidShow: OnMenuDidShowEvent | undefined;
        onMenuDidHide: OnMenuDidHideEvent | undefined;
        onMenuDidCancel: OnMenuDidCancelEvent | undefined;
        onPressMenuItem: OnPressMenuItemEvent | undefined;
        onRequestDeferredElement: import("../..").DeferredElementProvider | undefined;
        viewProps: {
            children?: React.ReactNode;
            hitSlop?: import("react-native").Insets | undefined;
            id?: string | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            pointerEvents?: "none" | "box-none" | "box-only" | "auto" | undefined;
            removeClippedSubviews?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerMove?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerDown?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerUp?: ((event: import("react-native").PointerEvent) => void) | undefined;
            onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            'aria-label'?: string | undefined;
            accessibilityRole?: import("react-native").AccessibilityRole | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            'aria-busy'?: boolean | undefined;
            'aria-checked'?: boolean | "mixed" | undefined;
            'aria-disabled'?: boolean | undefined;
            'aria-expanded'?: boolean | undefined;
            'aria-selected'?: boolean | undefined;
            'aria-labelledby'?: string | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            'aria-hidden'?: boolean | undefined;
            'aria-live'?: "off" | "polite" | "assertive" | undefined;
            'aria-modal'?: boolean | undefined;
            role?: import("react-native").Role | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            accessibilityLabelledBy?: string | string[] | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            accessibilityLanguage?: string | undefined;
        };
    };
    presentMenu: () => Promise<void>;
    dismissMenu: () => Promise<void>;
    provideDeferredElements: (deferredID: string, menuItems: MenuElementConfig[]) => Promise<void>;
    _handleGetRefToContextMenuButton: () => this;
    _handleOnLongPress: () => Promise<void>;
    _handleOnMenuWillShow: OnMenuWillShowEvent;
    _handleOnMenuWillHide: OnMenuWillHideEvent;
    _handleOnMenuWillCancel: OnMenuWillCancelEvent;
    _handleOnMenuDidShow: OnMenuDidShowEvent;
    _handleOnMenuDidHide: OnMenuDidHideEvent;
    _handleOnMenuDidCancel: OnMenuDidCancelEvent;
    _handleOnPressMenuItem: OnPressMenuItemEvent;
    private _handleOnRequestDeferredElement;
    render(): React.JSX.Element;
}
//# sourceMappingURL=ContextMenuButton.d.ts.map