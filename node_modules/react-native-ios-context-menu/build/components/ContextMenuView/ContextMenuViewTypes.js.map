{"version":3,"file":"ContextMenuViewTypes.js","sourceRoot":"","sources":["../../../src/components/ContextMenuView/ContextMenuViewTypes.ts"],"names":[],"mappings":"AAmEA,MAAM,CAAN,IAAY,wBAEX;AAFD,WAAY,wBAAwB;IAClC,2DAA+B,CAAA;AACjC,CAAC,EAFW,wBAAwB,KAAxB,wBAAwB,QAEnC;AAAA,CAAC","sourcesContent":["import type React from 'react';\nimport type { ViewProps } from 'react-native';\n\nimport type { TSEventEmitter } from '@dominicstop/ts-event-emitter';\nimport type { KeyMapType } from 'react-native-ios-utilities';\n\nimport type { RNIContextMenuViewBaseProps, RNIContextMenuViewInheritedProps } from '../../native_components/RNIContextMenuView';\n\nimport type { OnMenuDidHideEventObject } from '../../types/MenuEvents';\nimport type { DeferredElementProvider } from '../../types/MenuSharedTypes';\n\n\nexport type RenderItem = () => React.ReactElement;\n\nexport type ContextMenuViewInheritedProps = Partial<Pick<RNIContextMenuViewInheritedProps, \n  // Value Props\n  | 'menuConfig'\n  | 'previewConfig'\n  | 'auxiliaryPreviewConfig'\n  | 'shouldUseDiscoverabilityTitleAsFallbackValueForSubtitle'\n  | 'isContextMenuEnabled'\n  | 'isAuxiliaryPreviewEnabled'\n  | 'shouldPreventLongPressGestureFromPropagating'\n  | 'internalViewCleanupMode'\n\n  // Lifecycle Events\n  | 'onMenuWillShow'\n  | 'onMenuWillHide'\n  | 'onMenuWillCancel'\n  | 'onMenuDidShow'\n  | 'onMenuDidHide'\n  | 'onMenuDidCancel'\n  | 'onMenuAuxiliaryPreviewWillShow'\n  | 'onMenuAuxiliaryPreviewDidShow'\n\n  // `OnPress` Events\n  | 'onPressMenuItem'\n  | 'onPressMenuPreview'\n  \n>> & Partial<Pick<RNIContextMenuViewBaseProps,\n  | 'debugShouldEnableLogging'\n>>;\n\nexport type ContextMenuViewBaseProps = {\n  lazyPreview?: boolean;\n  useActionSheetFallback?: boolean;\n  shouldWaitForMenuToHideBeforeFiringOnPressMenuItem?: boolean;\n\n  shouldEnableAggressiveCleanup?: boolean;\n  shouldCleanupOnComponentWillUnmountForMenuPreview?: boolean;\n  shouldCleanupOnComponentWillUnmountForAuxPreview?: boolean;\n\n  onRequestDeferredElement?: DeferredElementProvider;\n  renderPreview?: RenderItem;\n  renderAuxiliaryPreview?: RenderItem;\n};\n\nexport type ContextMenuViewProps = \n    ContextMenuViewInheritedProps \n  & ContextMenuViewBaseProps\n  & ViewProps;\n\nexport type ContextMenuViewState = {\n  menuVisible: boolean;\n  mountPreview: boolean;\n};\n\nexport enum ContextMenuEmitterEvents {\n  onMenuDidHide = \"onMenuDidHide\",\n};\n\nexport type ContextMenuEmitterEventMap = KeyMapType<ContextMenuEmitterEvents, {\n  onMenuDidHide: OnMenuDidHideEventObject['nativeEvent'],\n}>\n\nexport type ContextMenuEventEmitter = \n  TSEventEmitter<ContextMenuEmitterEvents, ContextMenuEmitterEventMap>;"]}