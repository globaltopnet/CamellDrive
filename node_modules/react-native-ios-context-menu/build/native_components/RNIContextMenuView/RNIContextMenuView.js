import * as React from 'react';
import { StyleSheet } from 'react-native';
import { RNIContextMenuViewModule } from './RNIContextMenuViewModule';
import { RNIContextMenuNativeView } from './RNIContextMenuNativeView';
import { RNIUtilitiesModule } from 'react-native-ios-utilities';
export class RNIContextMenuView extends React.PureComponent {
    nativeRef;
    reactTag;
    constructor(props) {
        super(props);
    }
    ;
    componentWillUnmount() {
        const reactTag = this.getNativeReactTag();
        if (typeof reactTag !== 'number')
            return;
        RNIUtilitiesModule.notifyOnComponentWillUnmount(reactTag, {
            shouldForceCleanup: true,
            shouldIgnoreCleanupTriggers: false,
        });
    }
    ;
    getNativeRef = () => {
        return this.nativeRef;
    };
    getNativeReactTag = () => {
        // @ts-ignore
        return this.nativeRef?.nativeTag ?? this.reactTag;
    };
    presentMenu = async () => {
        const reactTag = this.getNativeReactTag();
        if (typeof reactTag !== 'number')
            return;
        await RNIContextMenuViewModule.presentMenu(reactTag);
    };
    dismissMenu = async () => {
        const reactTag = this.getNativeReactTag();
        if (typeof reactTag !== 'number')
            return;
        await RNIContextMenuViewModule.dismissMenu(reactTag);
    };
    showAuxiliaryPreviewAsPopover = async () => {
        const reactTag = this.getNativeReactTag();
        if (typeof reactTag !== 'number')
            return;
        await RNIContextMenuViewModule.showAuxiliaryPreviewAsPopover(reactTag);
    };
    provideDeferredElements = async (deferredID, menuItems) => {
        const reactTag = this.getNativeReactTag();
        if (typeof reactTag !== 'number')
            return;
        await RNIContextMenuViewModule.provideDeferredElements(reactTag, {
            deferredID,
            menuItems
        });
    };
    _handleOnLayout = ({ nativeEvent }) => {
        // @ts-ignore
        this.reactTag = nativeEvent.target;
    };
    _handleOnNativeRef = (ref) => {
        this.nativeRef = ref;
    };
    render() {
        return React.createElement(RNIContextMenuNativeView, {
            ...this.props,
            ...((this.reactTag == null) && {
                onLayout: this._handleOnLayout,
            }),
            // @ts-ignore
            ref: this._handleOnNativeRef,
            style: [
                this.props.style,
                styles.nativeView
            ],
        });
    }
    ;
}
;
const styles = StyleSheet.create({
    nativeView: {},
});
//# sourceMappingURL=RNIContextMenuView.js.map