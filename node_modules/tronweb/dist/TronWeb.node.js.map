{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"ethers\"","webpack:///external \"@ethersproject/bytes\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@ethersproject/bignumber\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@ethersproject/keccak256\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@ethersproject/properties\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"axios\"","webpack:///external \"@ethersproject/strings\"","webpack:///external \"@ethersproject/logger\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/typedData.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/message.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/lib/sidechain.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","toUtf8String","recoverAddress","SigningKey","AbiCoder","Interface","FormatTypes","arrayify","splitSignature","joinSignature","concat","id","isValidMnemonic","logger","Logger","getTronAddress","address","TronWeb","toHex","text","padding","Uint8Array","fill","NegativeOne","BigNumber","from","Zero","One","MaxUint256","hexTrue","hexZeroPad","toHexString","hexFalse","domainFieldTypes","version","chainId","verifyingContract","salt","domainFieldNames","checkString","throwArgumentError","domainChecks","error","toLowerCase","hexlify","getBaseEncoder","type","signed","width","boundsUpper","mask","boundsLower","add","mul","lt","gt","toTwos","padOffset","hexConcat","hexPadRight","encodeType","fields","TypedDataEncoder","types","defineReadOnly","freeze","deepCopy","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","primaryTypes","filter","checkCircular","found","child","subtype","primaryType","sort","_types","encoder","_encoderCache","_getEncoder","subEncoder","getEncoder","result","encodedType","values","unshift","encodeData","hashStruct","callback","_visit","reduce","accum","domain","domainFields","a","b","EIP712Domain","hashDomain","hash","domainValues","domainTypes","typesWithDomain","shallowCopy","message","visit","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","decodeBase58Address","base58Sting","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","btoa","signBytes","privateKey","contents","_signTypedData","signingKey","messageDigest","signDigest","substring","Number","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","com_priKeyBytes","com_addressBytes","generateAccount","pubKeyBytes","publicKey","base58","generateRandom","options","isObject","path","TRON_BIP39_PATH_PREFIX","account","ethersWallet","createRandom","mnemonic","generateAccountWithMnemonic","wordlist","fromMnemonic","abiCoder","_addressToHex","target","_array","newTarget","_isBigNumber","decodeParams","names","ignoreMethodHash","obj","arg","index","substr","encodeParams","extractSize","size","extractArrayDim","encodeParamsV2ByABI","funABI","args","buildFullTypeDefinition","typeDef","components","innerTypes","innerType","convertAddresses","addrArr","addrs","mapTuple","dimension","encodeArgs","inputs","convertTypes","decodeParamsV2ByABI","data","decodeResult","buildFullTypeNameDefinition","outputs","outputTypes","convertTypeNames","decodeResCopy","TRON_MESSAGE_PREFIX","hashMessage","signMessage","verifyMessage","isValidURL","url","validator","isURL","protocols","require_tld","isJson","parse","ex","isBoolean","bool","isBigNumber","number","constructor","isString","isFunction","isHex","isInteger","hasProperty","hasProperties","properties","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","abi","padLeft","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","_TypedDataEncoder","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","params","self","Validator","tronWeb","param","msg","Function","normalized","no","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","defaultAddress","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","stateMutability","rawParameter","funcABIV2","parametersV2","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","shieldedParameter","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifySignature","verifyMessageV2","base58Address","verifyTypedData","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","signMessageV2","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","signedHexTransaction","sendHexTransaction","hexTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","recovered","tronAddress","fromHex","decodeOutput","Method","iface","getEvent","format","sighash","getFunction","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","_call","send","_send","watch","_watch","deployed","constant_result","msg2","chunk","broadcast","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","libs","plugged","skipped","plugin","semver","satisfies","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","only_confirmed","only_unconfirmed","querystring","response","getEventsByTransactionID","SideChain","sideOptions","mainchain","fullHost","mainGatewayAddress","sideGatewayAddress","sideChainId","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","eventHeaders","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","setFullNodeHeader","setEventHeader","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"ethers\");","module.exports = require(\"@ethersproject/bytes\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@ethersproject/bignumber\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@ethersproject/keccak256\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@ethersproject/properties\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"axios\");","module.exports = require(\"@ethersproject/strings\");","module.exports = require(\"@ethersproject/logger\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n\nexport const TRON_BIP39_PATH_PREFIX = \"m/44'/195'\";\nexport const TRON_BIP39_PATH_INDEX_0 = TRON_BIP39_PATH_PREFIX + \"/0'/0/0\";","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str, strict = false) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { utils, Wallet as ethersWallet } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\nconst Interface = utils.Interface;\nconst FormatTypes = utils.FormatTypes;\nconst arrayify = utils.arrayify;\nconst splitSignature = utils.splitSignature;\nconst joinSignature = utils.joinSignature;\nconst concat = utils.concat;\nconst id = utils.id;\nconst isValidMnemonic = utils.isValidMnemonic;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n    Interface,\n    FormatTypes,\n    splitSignature,\n    joinSignature,\n    arrayify,\n    ethersWallet,\n    concat,\n    id,\n    isValidMnemonic\n};\n","import {  ADDRESS_PREFIX_REGEX } from './address';\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport TronWeb from 'index';\nconst version = \"tronweb/hash/5.4.0\";\nconst logger = new Logger(version);\nfunction getAddress(address) {\n    return TronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x');\n};\nfunction getTronAddress(address) {\n    return TronWeb.address.toHex(address);\n};\nfunction id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getTronAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"trcToken\": return getBaseEncoder('uint256');\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"trcToken\":\n                        return BigNumber.from(value).toString();\n                    case \"address\":\n                        return getTronAddress(value).toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256, SigningKey} from './ethersUtils';\nimport {TypedDataEncoder} from './typedData';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function _signTypedData(domain, types, value, privateKey) {\n    const key = {\n        toHexString: function () {\n            return '0x' + privateKey;\n        },\n        value: privateKey,\n    };\n    const signingKey = new SigningKey(key);\n\n    const messageDigest = TypedDataEncoder.hash(domain, types, value);\n    const signature = signingKey.signDigest(messageDigest);\n    const signatureHex = [\n        '0x',\n        signature.r.substring(2),\n        signature.s.substring(2),\n        Number(signature.v).toString(16),\n    ].join('');\n    return signatureHex;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey,\n    pkToAddress,\n} from './crypto';\nimport {ethersWallet} from './ethersUtils'\nimport {TRON_BIP39_PATH_INDEX_0} from './address'\nimport utils from './index';\n\nconst INVALID_TRON_PATH_ERROR_MSG = 'Invalid tron path provided';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n\nexport function generateRandom(options) {\n    if(!utils.isObject(options)) { options = {}; }\n    if(!options.path) {\n        options.path = TRON_BIP39_PATH_INDEX_0;\n    }\n    if(!String(options.path).match(/^m\\/44\\'\\/195\\'/)) {\n        throw new Error(INVALID_TRON_PATH_ERROR_MSG);\n    }\n\n    const account = ethersWallet.createRandom(options);\n\n    const result = {\n        mnemonic: account.mnemonic,\n        privateKey: account.privateKey,\n        publicKey: account.publicKey,\n        address: pkToAddress(account.privateKey.replace(/^0x/, ''))\n    }\n    \n    return result;\n}\n\nexport function generateAccountWithMnemonic(mnemonic, path, wordlist = 'en') {\n    if(!path) {\n        path = TRON_BIP39_PATH_INDEX_0;\n    }\n    if(!String(path).match(/^m\\/44\\'\\/195\\'/)) {\n        throw new Error(INVALID_TRON_PATH_ERROR_MSG);\n    }\n    const account =  ethersWallet.fromMnemonic(mnemonic, path, wordlist);\n\n    const result = {\n        mnemonic: account.mnemonic,\n        privateKey: account.privateKey,\n        publicKey: account.publicKey,\n        address: pkToAddress(account.privateKey.replace(/^0x/, ''))\n    }\n\n    return result;\n}","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nfunction _isArray(_array) {\n    return Array.isArray(_array);\n}\n\nfunction _addressToHex(value) {\n    return TronWeb.address.toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\n\nfunction deepCopy(target) {\n    if (\n        Object.prototype.toString.call(target) !== '[object Object]' &&\n        Object.prototype.toString.call(target) !== '[object Array]'\n    ) {\n        return target;\n    }\n    const newTarget = _isArray(target) ? [] : {};\n\n    Object.keys(target).forEach(key =>\n        newTarget[key] = target[key] instanceof Object && !target[key]._isBigNumber ? deepCopy(target[key]) : target[key]\n    );\n\n    return newTarget;\n}\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\nfunction extractSize (type) {\n  const size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n  return size ? size[2] : '';\n}\n\nfunction extractArrayDim (type) {\n  const size = extractSize(type)\n  return (size.match(/\\]\\[/g) || []).length + 1;\n}\n\nexport function encodeParamsV2ByABI(funABI, args) {\n    const types = [];\n\n    const buildFullTypeDefinition = (typeDef) => {\n      if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n        const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeDefinition(innerType) });\n        return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}`;\n      }\n\n      if (/trcToken/.test(typeDef.type))\n        return typeDef.type.replace(/trcToken/, 'uint256');\n\n      return typeDef.type;\n    }\n\n    const convertTypes = (types) => {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (/trcToken/.test(type))\n          types[i] = type.replace(/trcToken/, 'uint256');\n      }\n    }\n\n    const convertAddresses = addrArr => {\n      if (Array.isArray(addrArr)) {\n        addrArr.forEach((addrs, i) => {\n          addrArr[i] = convertAddresses(addrs);\n        });\n        return addrArr;\n      } else {\n        return _addressToHex(addrArr)\n      }\n    };\n\n    const mapTuple = (components, args, dimension) => {\n      if (dimension > 1) {\n        if (args.length) {\n          args.forEach(arg => {\n            mapTuple(components, arg, dimension - 1);\n          });\n        }\n      } else {\n        if (args.length && dimension) {\n          args.forEach(arg => {\n            encodeArgs(components, arg);\n          });\n        }\n      }\n    };\n\n    const encodeArgs = (inputs = [], args) => {\n      if (inputs.length)\n        inputs.forEach((input, i) => {\n          const type = input.type;\n\n          if (args[i])\n            if (type === 'address') args[i] = _addressToHex(args[i]);\n            else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n              convertAddresses(args[i])\n            else if (type.indexOf('tuple') === 0)\n              if (extractSize(type)) {\n                const dimension = extractArrayDim(type);\n                mapTuple(input.components, args[i], dimension);\n              } else encodeArgs(input.components, args[i]);\n        });\n    };\n\n    if (funABI.inputs && funABI.inputs.length) {\n      for (let i = 0; i < funABI.inputs.length; i++) {\n        const type = funABI.inputs[i].type;\n        // \"false\" will be converting to `false` and \"true\" will be working\n        // fine as abiCoder assume anything in quotes as `true`\n        if (type === 'bool' && args[i] === 'false') {\n          args[i] = false;\n        }\n        types.push(type.indexOf('tuple') === 0 ? buildFullTypeDefinition(funABI.inputs[i]) : type);\n        if (args.length < types.length) {\n          args.push('');\n        }\n      }\n    }\n\n    encodeArgs(funABI.inputs, args);\n    convertTypes(types);\n\n    return abiCoder.encode(types, args);\n}\n\nexport function decodeParamsV2ByABI(funABI, data) {\n  const convertTypeNames = (types) => {\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i]\n      if (/^trcToken/.test(type))\n        types[i] = type.replace(/^trcToken/, 'uint256')\n    }\n  }\n\n  const convertAddresses = addrArr => {\n    if (Array.isArray(addrArr)) {\n      addrArr.forEach((addrs, i) => {\n        addrArr[i] = convertAddresses(addrs);\n      });\n      return addrArr;\n    } else {\n      return TronWeb.address.toHex(addrArr)\n    }\n  };\n\n  const mapTuple = (components, args, dimension) => {\n    if (dimension > 1) {\n      if (args.length) {\n        args.forEach(arg => {\n          mapTuple(components, arg, dimension - 1);\n        });\n      }\n    } else {\n      if (args.length && dimension) {\n        args.forEach(arg => {\n          decodeResult(components, arg);\n        });\n      }\n    }\n  };\n\n  const buildFullTypeNameDefinition = (typeDef) => {\n    const name = typeDef.name ? ` ${typeDef.name}` : '';\n    if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n      const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeNameDefinition(innerType) });\n      return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}${name}`;\n    }\n    if (/trcToken/.test(typeDef.type))\n      return typeDef.type.replace(/trcToken/, 'uint256') + name;\n\n    return typeDef.type + name;\n  }\n\n  const decodeResult = (outputs = [], result) => {\n    if (outputs.length)\n      outputs.forEach((output, i) => {\n        const {type, name} = output;\n\n        if (result[i])\n          if (type === 'address') {\n            result[i] = TronWeb.address.toHex(result[i]);\n            if(name) result[name] = TronWeb.address.toHex(result[name]);\n          }\n          else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[') {\n            convertAddresses(result[i])\n            if(name) convertAddresses(result[name])\n          }\n          else if (type.indexOf('tuple') === 0) {\n            if (extractSize(type)) {\n              const dimension = extractArrayDim(type);\n              mapTuple(output.components, result[i], dimension);\n            } else decodeResult(output.components, result[i]);\n\n            if(name) result[name] = result[i];\n          }\n      });\n  };\n\n  // Only decode if there supposed to be fields\n  if (funABI.outputs && funABI.outputs.length > 0) {\n\n      let outputTypes = [];\n      for (let i = 0; i < funABI.outputs.length; i++) {\n        const type = funABI.outputs[i].type;\n        const name = funABI.outputs[i].name ? ` ${funABI.outputs[i].name}` : '';\n        outputTypes.push(type.indexOf('tuple') === 0 ? buildFullTypeNameDefinition(funABI.outputs[i]) : type + name);\n      }\n      convertTypeNames(outputTypes);\n\n      if (!data || !data.length) data = new Uint8Array(32 * funABI.outputs.length); // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data\n      // decode data\n      const decodeRes = abiCoder.decode(outputTypes, data);\n      const decodeResCopy = deepCopy(decodeRes);\n      decodeResult(funABI.outputs, decodeResCopy);\n\n      return decodeResCopy\n  }\n  return [];\n}","import { keccak256, toUtf8Bytes, concat, recoverAddress, SigningKey, joinSignature } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\nimport { getBase58CheckAddress } from 'utils/crypto';\nimport { hexStr2byteArray } from 'utils/code';\n\nexport const TRON_MESSAGE_PREFIX = \"\\x19TRON Signed Message:\\n\";\n\nexport function hashMessage(message) {\n    if (typeof(message) === \"string\") { \n        message = toUtf8Bytes(message);\n    }\n\n    return keccak256(concat([\n        toUtf8Bytes(TRON_MESSAGE_PREFIX),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\nexport function signMessage(message, privateKey) {\n    if(!privateKey.match(/^0x/)) {\n        privateKey =  '0x' + privateKey;\n    }\n    \n    const signingKey = new SigningKey(privateKey);\n    const messageDigest = hashMessage(message);\n    const signature = signingKey.signDigest(messageDigest);\n    \n    return joinSignature(signature)\n}\n\nexport function verifyMessage(message, signature) {\n    if(!signature.match(/^0x/)) {\n      signature =  '0x' + signature;\n    }\n    const recovered = recoverAddress(hashMessage(message), signature);\n    const base58Address = getBase58CheckAddress(hexStr2byteArray(recovered.replace(/^0x/, ADDRESS_PREFIX)));\n    \n    return base58Address;\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as message from './message'\nimport * as ethersUtils from './ethersUtils';\nimport {TypedDataEncoder as _TypedDataEncoder} from './typedData'\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    message,\n    _TypedDataEncoder,\n    ethersUtils\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\nimport {encodeParamsV2ByABI} from 'utils/abi';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type === 'constructor' && 'payable' === func.stateMutability.toLowerCase();\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        if (options.rawParameter && utils.isString(options.rawParameter)) {\n            parameters = options.rawParameter.replace(/^(0x)/, '');\n        } else if (options.funcABIV2) {\n            parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n        } else {\n            var constructorParams = abi.find(\n                (it) => {\n                    return it.type === 'constructor';\n                }\n            );\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n        }\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            // work for abiv2 if passed the function abi in options\n            if (options.funcABIV2) {\n                parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n            }\n\n            if (options.shieldedParameter && utils.isString(options.shieldedParameter)) {\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && utils.isString(options.rawParameter)) {\n                parameters = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n        args.call_value = parseInt(callValue)\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        if (!options._isConstant) {\n            args.fee_limit = parseInt(feeLimit)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport { keccak256, toUtf8Bytes, recoverAddress, SigningKey } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    verifyMessageV2(message = false, signature = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessageV2, message, signature, options);\n\n        try {\n            const base58Address = Trx.verifyMessageV2(message, signature);\n            callback(null, base58Address);\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    static verifyMessageV2(message, signature) {\n        return utils.message.verifyMessage(message, signature);\n    }\n    \n    verifyTypedData(domain, types, value, signature, address = this.tronWeb.defaultAddress.base58, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyTypedData, domain, types, value, signature, address);\n\n        if (Trx.verifyTypedData(domain, types, value, signature, address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifyTypedData(domain, types, value, signature, address) {\n        signature = signature.replace(/^0x/, '');\n\n        const messageDigest = utils._TypedDataEncoder.hash(domain, types, value);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128),\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    /**\n     * sign message v2 for verified header length\n     * \n     * @param {message to be signed, should be Bytes or string} message \n     * @param {privateKey for signature} privateKey \n     * @param {reserved} options\n     * @param {callback function} callback\n     */\n    signMessageV2(message, privateKey = this.tronWeb.defaultPrivateKey, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.signMessageV2, message, privateKey);\n\n        try {\n            const signatureHex = Trx.signMessageV2(message, privateKey);\n            return callback(null, signatureHex);\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signMessageV2(message, privateKey) {\n        return utils.message.signMessage(message, privateKey);\n    }\n\n    _signTypedData(domain, types, value, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._signTypedData, domain, types, value, privateKey);\n\n        try {\n            const signatureHex = Trx._signTypedData(domain, types, value, privateKey);\n            return callback(null, signatureHex);\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static _signTypedData(domain, types, value, privateKey) {\n        return utils.crypto._signTypedData(domain, types, value, privateKey);\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendHexTransaction(signedHexTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendHexTransaction, signedHexTransaction, options);\n\n        if (!utils.isHex(signedHexTransaction))\n            return callback('Invalid hex transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        const params = {\n            transaction: signedHexTransaction\n        }\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasthex',\n             params,\n            'post'\n        ).then(result => {\n            if (result.result) {\n                result.transaction = JSON.parse(result.transaction)\n                result.hexTransaction = signedHexTransaction;\n            }\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    broadcastHex(...args) {\n        return this.sendHexTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport {encodeParamsV2ByABI, decodeParamsV2ByABI} from 'utils/abi';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable';\n    abi.type = abi.type ? abi.type.toLowerCase() : '';\n    if(abi.type === 'fallback' || abi.type === 'receive') return '0x';\n    let iface = new utils.ethersUtils.Interface([abi]);\n    if(abi.type === 'event') {\n      return iface.getEvent(abi.name).format(utils.ethersUtils.FormatTypes.sighash);\n    }\n    return iface.getFunction(abi.name).format(utils.ethersUtils.FormatTypes.sighash)\n}\n\nconst decodeOutput = (abi, output) => {\n    return decodeParamsV2ByABI(abi, output)\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n      let rawParameter = '';\n      if(this.abi && !/event/i.test(this.abi.type)) {\n          rawParameter = encodeParamsV2ByABI(this.abi, args);\n      }\n      return {\n          call: (options = {}, callback = false) => {\n              if (utils.isFunction(options)) {\n                  callback = options;\n                  options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._call([], [], options, callback);\n          },\n          send: (options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) => {\n              if (utils.isFunction(privateKey)) {\n                  callback = privateKey;\n                  privateKey = this.tronWeb.defaultPrivateKey;\n              }\n              if (utils.isFunction(options)) {\n                callback = options;\n                options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._send([], [], options, privateKey, callback);\n          },\n          watch: (...methodArgs) => this._watch(...methodArgs)\n      }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.abi, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1 && Object.keys(output).length === 1) {\n                        output = output[0];\n                    }\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.abi, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1 && Object.keys(decoded).length === 1) {\n                    decoded = decoded[0];\n                }\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n\n                if(options.size) {\n                    params.size = options.size;\n                }\n                \n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.only_confirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.only_unconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\n\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX, TRON_BIP39_PATH_INDEX_0 } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version', 'createRandom', 'fromMnemonic'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey, strict = false) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey, strict);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    static createRandom(options) {\n        const account = utils.accounts.generateRandom(options);\n\n        return account\n    }\n\n    static fromMnemonic(mnemonic, path = TRON_BIP39_PATH_INDEX_0, wordlist = 'en') {\n        const account = utils.accounts.generateAccountWithMnemonic(mnemonic, path, wordlist);\n\n        return account\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}