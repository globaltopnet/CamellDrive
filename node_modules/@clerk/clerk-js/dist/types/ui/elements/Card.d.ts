import React from 'react';
import type { ElementDescriptor } from '../customizables/elementDescriptors';
import type { PropsOfComponent, ThemableCssProp } from '../styledSystem';
type CardProps = PropsOfComponent<typeof BaseCard> & React.PropsWithChildren<Record<never, never>> & {
    insideAppLogoSx?: ThemableCssProp;
};
export declare const Card: React.ForwardRefExoticComponent<Omit<CardProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
export declare const ProfileCard: React.ForwardRefExoticComponent<Omit<CardProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
export declare const BaseCard: React.ForwardRefExoticComponent<Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    css?: ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    elementDescriptor?: ElementDescriptor | (ElementDescriptor | undefined)[] | undefined;
    elementId?: import("../customizables/elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: ThemableCssProp;
}, "ref"> & React.RefAttributes<HTMLDivElement>>;
export {};
