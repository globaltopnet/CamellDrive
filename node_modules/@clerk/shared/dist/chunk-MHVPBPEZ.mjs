import {
  deprecated
} from "./chunk-IC4FGZI3.mjs";

// src/proxy.ts
function isValidProxyUrl(key) {
  if (!key) {
    return true;
  }
  return isHttpOrHttps(key) || isProxyUrlRelative(key);
}
function isHttpOrHttps(key) {
  return /^http(s)?:\/\//.test(key || "");
}
function isProxyUrlRelative(key) {
  return key.startsWith("/");
}
function proxyUrlToAbsoluteURL(url) {
  if (!url) {
    return "";
  }
  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;
}
function getRequestUrl({ request, relativePath }) {
  var _a, _b, _c, _d, _e, _f;
  deprecated("getRequestUrl", "Use `buildRequestUrl` from @clerk/backend instead.");
  const { headers, url: initialUrl } = request;
  const url = new URL(initialUrl);
  const host = (_c = (_b = (_a = headers.get("X-Forwarded-Host")) != null ? _a : headers.get("host")) != null ? _b : headers["host"]) != null ? _c : url.host;
  let protocol = (_f = (_e = (_d = headers.get("X-Forwarded-Proto")) != null ? _d : headers["X-Forwarded-Proto"]) == null ? void 0 : _e.split(",")[0]) != null ? _f : url.protocol;
  protocol = protocol.replace(/[:/]/, "");
  return new URL(relativePath || url.pathname, `${protocol}://${host}`);
}

export {
  isValidProxyUrl,
  isHttpOrHttps,
  isProxyUrlRelative,
  proxyUrlToAbsoluteURL,
  getRequestUrl
};
//# sourceMappingURL=chunk-MHVPBPEZ.mjs.map